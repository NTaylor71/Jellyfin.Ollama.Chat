# =============================================================================
# NLP Provider Service - Multi-stage build to reduce image size
# =============================================================================

# =============================================================================
# STAGE 1: BUILDER - Install all dependencies and build tools
# =============================================================================
FROM python:3.12-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

# Install build dependencies including Java JDK for HeidelTime
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    curl \
    openjdk-17-jdk \
    && rm -rf /var/lib/apt/lists/*

# Set Java environment for building
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$JAVA_HOME/bin:$PATH

# Create app directory
WORKDIR /app

# Copy project files
COPY pyproject.toml ./
COPY src/ ./src/

# Install all Python dependencies to /opt/venv
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e .[nlp,api,mongodb,monitoring]

# Download Stanford CoreNLP dependencies for SUTime
RUN mkdir -p /tmp/stanford_jars && \
    cd /tmp/stanford_jars && \
    curl -s -L -O "https://repo1.maven.org/maven2/edu/stanford/nlp/stanford-corenlp/4.0.0/stanford-corenlp-4.0.0.jar" && \
    curl -s -L -O "https://repo1.maven.org/maven2/edu/stanford/nlp/stanford-corenlp/4.0.0/stanford-corenlp-4.0.0-models.jar" && \
    curl -s -L -O "https://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar" && \
    curl -s -L -O "https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/1.7.30/slf4j-simple-1.7.30.jar" && \
    curl -s -L -O "https://repo1.maven.org/maven2/joda-time/joda-time/2.10.5/joda-time-2.10.5.jar" && \
    ls -la && \
    cp *.jar /opt/venv/lib/python3.12/site-packages/sutime/jars/ && \
    ls -la /opt/venv/lib/python3.12/site-packages/sutime/jars/ && \
    rm -rf /tmp/stanford_jars

# =============================================================================
# STAGE 2: RUNTIME - Copy only necessary files from builder
# =============================================================================
FROM python:3.12-slim as runtime

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    NLTK_DATA=/app/models/nltk_data \
    GENSIM_DATA_DIR=/app/models/gensim_data

# Install only runtime dependencies (JRE, not JDK)
RUN apt-get update && apt-get install -y \
    curl \
    gosu \
    openjdk-17-jre-headless \
    && rm -rf /var/lib/apt/lists/*

# Set Java environment for runtime
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$JAVA_HOME/bin:$PATH

# Create app directory
WORKDIR /app

# Copy Python virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy project files from builder
COPY --from=builder /app/src ./src
COPY --from=builder /app/pyproject.toml ./

# Models will be mounted via volume - no need to copy

# No complex entrypoint needed - service handles model downloads

# Create directories
RUN mkdir -p logs models/nltk_data models/gensim_data models/spacy_data

# Create non-root user with standard UID/GID
RUN groupadd -g 1000 nlp && useradd -u 1000 -g 1000 -m nlp && \
    chown -R nlp:nlp /app && \
    chown -R nlp:nlp /opt/venv

# Environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Switch to nlp user and run the service directly
USER nlp

# Run full NLP provider service (includes ConceptNet and SUTime)
CMD ["python", "-m", "src.services.provider_services.nlp_provider_service"]